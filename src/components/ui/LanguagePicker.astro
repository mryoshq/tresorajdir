---
import { languages } from "@utils//ui";
import Icon from "./icons/Icon.astro";
---

<!-- 
  Preline Dropdown Container
  - Added 'data-hs-dropdown-placement' for automatic positioning.
    'bottom-end' aligns the menu's end to the button's end.
  - Added 'data-hs-dropdown-offset' to control the spacing from the button.
-->
<div
  class="hs-dropdown relative inline-flex"
  data-hs-dropdown-placement="bottom-end"
  data-hs-dropdown-offset="8"
>
  <button
    id="hs-dropdown-default"
    type="button"
    aria-label="Change language"
    class="hs-dropdown-toggle inline-flex items-center justify-center rounded-full p-2 text-sm font-medium text-neutral-600 outline-hidden ring-zinc-500 transition duration-300
           hover:bg-green-100 hover:text-red-500
           dark:border-neutral-100 dark:text-neutral-100 dark:ring-zinc-200 dark:hover:bg-green-100 dark:hover:text-red-700 dark:focus:outline-hidden
           hs-dropdown-open:bg-green-100 hs-dropdown-open:text-red-500
           dark:hs-dropdown-open:bg-d1fae5 dark:hs-dropdown-open:text-oklch(0.440 0.220 34.8)"
  >
    <Icon name="earth" />
  </button>

  <!-- 
    Dropdown Menu
    - Removed manual positioning classes like 'top-*', 'right-*', 'transform-none!'.
    - Preline will now automatically handle the position and transforms.
  -->
  <div
    id="language-dropdown"
    class="hs-dropdown-menu duration mt-2 hidden w-48 rounded-md bg-neutral-50 p-2 opacity-0 shadow-md transition-[opacity,margin] hs-dropdown-open:opacity-100 dark:divide-neutral-700 dark:border dark:border-neutral-100/50 dark:bg-green-100/50"
    aria-labelledby="hs-dropdown-default"
  >
    {
      Object.entries(languages).map(([lang, label]) => (
        <a
          class="flex items-center gap-x-3.5 rounded-lg px-3 py-2 text-sm text-neutral-500 hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-hidden dark:text-neutral-100 dark:hover:text-green-900 dark:focus:bg-green-100"
          href={`/${lang === "fr" ? "" : lang}`}
          data-lang={lang}
        >
          {label}
        </a>
      ))
    }
  </div>
</div>

<!-- 
  Removed the custom script that was handling click events.
  Preline's core JS, which should be initialized in your layout, handles this automatically.
  The 'hs-dropdown' class on the container is all that's needed to activate it.
-->
<script>
  // Language switcher that redirects to home page to avoid 404 errors
  // since different languages have different content
  document.addEventListener("DOMContentLoaded", function () {
    const languageDropdown = document.getElementById("language-dropdown");

    if (languageDropdown) {
      const languageLinks = languageDropdown.querySelectorAll("a");

      languageLinks.forEach((link) => {
        link.addEventListener("click", function (event) {
          event.preventDefault(); // Prevent default link behavior

          const url = new URL(window.location.href);
          const lang = link.getAttribute("href")?.replace("/", "");

          // Always redirect to home page in the selected language
          // This prevents 404 errors when switching languages
          let newPath = "/";
          if (lang && lang !== "fr") {
            newPath = `/${lang}`;
          }

          // Navigate to the home page in the selected language
          window.location.href = `${url.origin}${newPath}${url.search}`;
        });
      });
    }
  });
</script>

<!--
  Removed the custom '.is-active' styles.
  The active state is now handled using Preline's 'hs-dropdown-open:*' modifier classes directly on the button.
-->
<style>
  /* Define custom colors for use in Tailwind's dark mode modifier */
  .dark .dark\:hs-dropdown-open\:bg-d1fae5 {
    background-color: #d1fae5; /* example green-100 */
  }
  .dark .dark\:hs-dropdown-open\:text-oklch\(0\.440\ 0\.220\ 34\.8\) {
    color: oklch(0.44 0.22 34.8);
  }
</style>