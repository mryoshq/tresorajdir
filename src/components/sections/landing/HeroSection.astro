---
// Import the necessary dependencies
import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";

// Define props from Astro
const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  src,
  alt
} = Astro.props;

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  src?: any;
  alt?: string;
}
---

<!-- Defining a grid container that holds all the content -->
<section
  class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full relative overflow-hidden overflow-x-hidden hero-grid" style="height: 100vh;">
  
  <!-- Light Mode: Particles -->
  <div class='absolute inset-0 block dark:hidden'>
    <div id='particles1-hero' class='absolute inset-0'></div>
    <div id='particles2-hero' class='absolute inset-0'></div>
    <div id='particles3-hero' class='absolute inset-0'></div>
  </div>

  <!-- Dark Theme: Stars -->
  <div class='absolute inset-0 hidden dark:block'>
    <div id='stars1-hero' class='absolute inset-0'></div>
    <div id='stars2-hero' class='absolute inset-0'></div>
    <div id='stars3-hero' class='absolute inset-0'></div>
  </div>


  <!-- Title and description -->
  <div class="relative z-10 hero-content">
    <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
    <h1
      class="block text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight hero-title"
    >
      <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
      <Fragment set:html={title} />
    </h1>
    {subTitle &&
    <p
      class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5 hero-subtitle"
    >
      {subTitle}
    </p>
  }
    <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
    <div class="mt-7 grid w-full gap-3 sm:inline-flex hero-buttons">
      {primaryBtn && 
      <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
      }
      {secondaryBtn && 
      <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
      }
    </div>

 
  </div>
  
  <!-- Hero Image Section -->
  {src && alt && (
    <div class="flex w-full relative z-10 hero-image">
      <div class="top-12 overflow-hidden">
        <Image
          src={src}
          alt={alt}
          class="h-full w-full scale-110 object-cover object-center"
          draggable={"false"}
          loading={"eager"}
          format={"avif"}
        />
      </div>
    </div>
  )}

  <script>
    import { gsap } from 'gsap';

    // Initialize background for hero section
    function generateParticles(n: number) {
      let value = `${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #98141d`;
      for (let i = 2; i <= n; i++) {
        // Alternate between red and green
        const color = i % 2 === 0 ? '#98141d' : '#006233';
        value += `, ${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px ${color}`;
      }
      return value;
    }

    function generateStars(n: number) {
      let value = `${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #fff`;
      for (let i = 2; i <= n; i++) {
        value += `, ${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #fff`;
      }
      return value;
    }

    function initHeroBG() {
      // Initialize hero section background
      const particlesSmall = generateParticles(1000);
      const particlesMedium = generateParticles(500);
      const particlesLarge = generateParticles(250);
      
      const particles1 = document.getElementById('particles1-hero');
      const particles2 = document.getElementById('particles2-hero');
      const particles3 = document.getElementById('particles3-hero');

      if (particles1) {
        particles1.style.cssText = `
          width: 1px;
          height: 1px;
          border-radius: 50%;
          box-shadow: ${particlesSmall};
          animation: animStar 50s linear infinite;
        `;
      }

      if (particles2) {
        particles2.style.cssText = `
          width: 1.5px;
          height: 1.5px;
          border-radius: 50%;
          box-shadow: ${particlesMedium};
          animation: animateParticle 100s linear infinite;
        `;
      }

      if (particles3) {
        particles3.style.cssText = `
          width: 2px;
          height: 2px;
          border-radius: 50%;
          box-shadow: ${particlesLarge};
          animation: animateParticle 150s linear infinite;
        `;
      }

      const starsSmall = generateStars(1000);
      const starsMedium = generateStars(500);
      const starsLarge = generateStars(250);
      
      const stars1 = document.getElementById('stars1-hero');
      const stars2 = document.getElementById('stars2-hero');
      const stars3 = document.getElementById('stars3-hero');

      if (stars1) {
        stars1.style.cssText = `
          width: 1px;
          height: 1px;
          border-radius: 50%;
          box-shadow: ${starsSmall};
          animation: animStar 50s linear infinite;
        `;
      }

      if (stars2) {
        stars2.style.cssText = `
          width: 1.5px;
          height: 1.5px;
          border-radius: 50%;
          box-shadow: ${starsMedium};
          animation: animateParticle 100s linear infinite;
        `;
      }

      if (stars3) {
        stars3.style.cssText = `
          width: 2px;
          height: 2px;
          border-radius: 50%;
          box-shadow: ${starsLarge};
          animation: animateParticle 150s linear infinite;
        `;
      }
    }

    function initHeroAnimation() {
      // Create GSAP timeline for hero animation
      const tl = gsap.timeline();
      
      // Set initial states
      gsap.set('.hero-image', { opacity: 0 });
      gsap.set('.hero-title', { opacity: 0, y: -50 });
      gsap.set('.hero-subtitle', { opacity: 0, y: 30 });
      gsap.set('.hero-buttons', { opacity: 0, y: 30 });

      // Animation sequence:
      // 1. Image fades in first
      tl.to('.hero-image', {
        opacity: 1,
        duration: 1.2,
        ease: "power2.out"
      })
      // 2. Text appears (title and subtitle together)
      .to('.hero-title', {
        opacity: 1,
        y: 0,
        duration: 0.8,
        ease: "power2.out"
      }, "-=0.6")
      .to('.hero-subtitle', {
        opacity: 1,
        y: 0,
        duration: 0.8,
        ease: "power2.out"
      }, "-=0.4")
      // 3. Buttons appear
      .to('.hero-buttons', {
        opacity: 1,
        y: 0,
        duration: 0.6,
        ease: "power2.out"
      }, "-=0.2");

      // Only animate navbar on home page
      const isHomePage = window.location.pathname === '/' || window.location.pathname === '/en';
      if (isHomePage) {
        // 4. Header appears last - slides down from top (faster)
        tl.to('.hero-header', {
          opacity: 1,
          y: 0,
          duration: 0.4,
          ease: "power2.out"
        }, "-=0.1")
        // 5. Navbar elements animate in (faster)
        .to('.hero-navbar', {
          opacity: 1,
          duration: 0.3,
          ease: "power2.out"
        }, "-=0.2")
        .to('.hero-logo, .hero-logo-mobile', {
          opacity: 1,
          scale: 1,
          duration: 0.3,
          ease: "back.out(1.4)"
        }, "-=0.1")
        .to('.hero-nav-links', {
          opacity: 1,
          y: 0,
          duration: 0.3,
          ease: "power2.out"
        }, "-=0.1")
        .to('.hero-controls, .hero-controls-mobile', {
          opacity: 1,
          y: 0,
          duration: 0.3,
          ease: "power2.out"
        }, "-=0.05");
      }
    }

    // Wait for DOM to be ready and then initialize
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        initHeroBG();
        initHeroAnimation();
      });
    } else {
      // DOM is already ready
      setTimeout(() => {
        initHeroBG();
        initHeroAnimation();
      }, 100);
    }

    // Also try to initialize after Astro page transitions
    document.addEventListener('astro:after-swap', () => {
      initHeroBG();
      initHeroAnimation();
    });
  </script>
</section>

<style>
  /* CSS Grid solution to avoid layout shifts */
  .hero-grid {
    /* Mobile: single column, image first, then content */
    grid-template-areas: 
      "image"
      "content";
  }
  
  .hero-content {
    grid-area: content;
  }
  
  .hero-image {
    grid-area: image;
  }
  
  /* Desktop: two columns, content first, then image */
  @media (min-width: 768px) {
    .hero-grid {
      grid-template-areas: 
        "content image";
    }
  }

  /* Initial animation states - elements are hidden until GSAP animates them */
  .hero-image {
    opacity: 0;
  }
  
  .hero-title {
    opacity: 0;
    transform: translateY(-50px);
  }
  
  .hero-subtitle {
    opacity: 0;
    transform: translateY(30px);
  }
  
  .hero-buttons {
    opacity: 0;
    transform: translateY(30px);
  }

  /* Ensure smooth transitions */
  .hero-image,
  .hero-title,
  .hero-subtitle,
  .hero-buttons {
    will-change: opacity, transform;
  }
</style>
