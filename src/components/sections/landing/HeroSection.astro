---
// Import the necessary dependencies
import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";

// Define props from Astro
const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  src,
  alt
} = Astro.props;

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  src?: any;
  alt?: string;
}
---

<!-- Defining a grid container that holds all the content -->
<section
  class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full relative overflow-hidden overflow-x-hidden hero-grid" style="height: 100vh;">
  
  <!-- Light Mode: Particles -->
  <div class='absolute inset-0 block dark:hidden'>
    <div id='particles1-hero' class='absolute inset-0'></div>
    <div id='particles2-hero' class='absolute inset-0'></div>
    <div id='particles3-hero' class='absolute inset-0'></div>
  </div>

  <!-- Dark Theme: Stars -->
  <div class='absolute inset-0 hidden dark:block'>
    <div id='stars1-hero' class='absolute inset-0'></div>
    <div id='stars2-hero' class='absolute inset-0'></div>
    <div id='stars3-hero' class='absolute inset-0'></div>
  </div>


  <!-- Title and description -->
  <div class="relative z-10 hero-content">
    <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
    <h1
      class="block text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight"
    >
      <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
      <Fragment set:html={title} />
    </h1>
    {subTitle &&
    <p
      class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5"
    >
      {subTitle}
    </p>
  }
    <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
    <div class="mt-7 grid w-full gap-3 sm:inline-flex">
      {primaryBtn && 
      <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
      }
      {secondaryBtn && 
      <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
      }
    </div>

 
  </div>
  
  <!-- Hero Image Section -->
  {src && alt && (
    <div class="flex w-full relative z-10 hero-image">
      <div class="top-12 overflow-hidden">
        <Image
          src={src}
          alt={alt}
          class="h-full w-full scale-110 object-cover object-center"
          draggable={"false"}
          loading={"eager"}
          format={"avif"}
        />
      </div>
    </div>
  )}

  <script is:inline>
    // Initialize background for hero section
    function generateParticles(n) {
      let value = `${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #98141d`;
      for (let i = 2; i <= n; i++) {
        // Alternate between red and green
        const color = i % 2 === 0 ? '#98141d' : '#006233';
        value += `, ${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px ${color}`;
      }
      return value;
    }

    function generateStars(n) {
      let value = `${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #fff`;
      for (let i = 2; i <= n; i++) {
        value += `, ${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #fff`;
      }
      return value;
    }


    function initHeroBG() {
      // Initialize hero section background
      const particlesSmall = generateParticles(1000);
      const particlesMedium = generateParticles(500);
      const particlesLarge = generateParticles(250);
      
      const particles1 = document.getElementById('particles1-hero');
      const particles2 = document.getElementById('particles2-hero');
      const particles3 = document.getElementById('particles3-hero');

      if (particles1) {
        particles1.style.cssText = `
          width: 1px;
          height: 1px;
          border-radius: 50%;
          box-shadow: ${particlesSmall};
          animation: animStar 50s linear infinite;
        `;
      }

      if (particles2) {
        particles2.style.cssText = `
          width: 1.5px;
          height: 1.5px;
          border-radius: 50%;
          box-shadow: ${particlesMedium};
          animation: animateParticle 100s linear infinite;
        `;
      }

      if (particles3) {
        particles3.style.cssText = `
          width: 2px;
          height: 2px;
          border-radius: 50%;
          box-shadow: ${particlesLarge};
          animation: animateParticle 150s linear infinite;
        `;
      }

      const starsSmall = generateStars(1000);
      const starsMedium = generateStars(500);
      const starsLarge = generateStars(250);
      
      const stars1 = document.getElementById('stars1-hero');
      const stars2 = document.getElementById('stars2-hero');
      const stars3 = document.getElementById('stars3-hero');

      if (stars1) {
        stars1.style.cssText = `
          width: 1px;
          height: 1px;
          border-radius: 50%;
          box-shadow: ${starsSmall};
          animation: animStar 50s linear infinite;
        `;
      }

      if (stars2) {
        stars2.style.cssText = `
          width: 1.5px;
          height: 1.5px;
          border-radius: 50%;
          box-shadow: ${starsMedium};
          animation: animateParticle 100s linear infinite;
        `;
      }

      if (stars3) {
        stars3.style.cssText = `
          width: 2px;
          height: 2px;
          border-radius: 50%;
          box-shadow: ${starsLarge};
          animation: animateParticle 150s linear infinite;
        `;
      }

    }


    // Wait for DOM to be ready and then initialize
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initHeroBG);
    } else {
      // DOM is already ready
      setTimeout(initHeroBG, 100);
    }

    // Also try to initialize after Astro page transitions
    document.addEventListener('astro:after-swap', initHeroBG);
  </script>
</section>

<style>
  /* CSS Grid solution to avoid layout shifts */
  .hero-grid {
    /* Mobile: single column, image first, then content */
    grid-template-areas: 
      "image"
      "content";
  }
  
  .hero-content {
    grid-area: content;
  }
  
  .hero-image {
    grid-area: image;
  }
  
  /* Desktop: two columns, content first, then image */
  @media (min-width: 768px) {
    .hero-grid {
      grid-template-areas: 
        "content image";
    }
  }
</style>
