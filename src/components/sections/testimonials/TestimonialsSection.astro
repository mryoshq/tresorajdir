---
import TestimonialItem from "./TestimonialItem.astro";

const {
  title,
  subTitle,
  testimonials,
  
} = Astro.props;

interface Props {
  title: string;
  subTitle?: string;
  testimonials?: Testimonial[];
  
}

// TypeScript type for testimonials
type Testimonial = {
  content: string;
};

// TypeScript type for stats.

---

<section
  class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full relative overflow-hidden overflow-x-hidden"
>
  <!-- Light Mode: Particles -->
  <div class='absolute inset-0 block dark:hidden'>
    <div id='particles1-testimonials' class='absolute inset-0'></div>
    <div id='particles2-testimonials' class='absolute inset-0'></div>
    <div id='particles3-testimonials' class='absolute inset-0'></div>
  </div>

  <!-- Dark Theme: Stars -->
  <div class='absolute inset-0 hidden dark:block'>
    <div id='stars1-testimonials' class='absolute inset-0'></div>
    <div id='stars2-testimonials' class='absolute inset-0'></div>
    <div id='stars3-testimonials' class='absolute inset-0'></div>
  </div>
    <!-- Title and Subtitle - Centered -->
  <div class="mb-12 text-center">
    <h2 class="mb-4 text-3xl font-bold text-neutral-800 dark:text-neutral-200 lg:text-4xl">
      {title}
    </h2>
  </div>

  <!-- Testimonials Section - Two-thirds width on large screens -->
  <div class="mx-auto max-w-4xl lg:max-w-5xl">
    { testimonials &&
      testimonials.map((testimonial) => (
        <TestimonialItem
          content={testimonial.content}
        />
      ))
    }
    {subTitle &&
     <p class="mb-4 text-xl text-neutral-600 dark:text-neutral-400 text-center">
       {subTitle}
     </p>
   }
  </div>

  <script is:inline>
    // Initialize background for testimonials section
    function generateParticles(n) {
      let value = `${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #98141d`;
      for (let i = 2; i <= n; i++) {
        // Alternate between red and green
        const color = i % 2 === 0 ? '#98141d' : '#006233';
        value += `, ${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px ${color}`;
      }
      return value;
    }

    function generateStars(n) {
      let value = `${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #fff`;
      for (let i = 2; i <= n; i++) {
        value += `, ${Math.floor(Math.random() * 2560)}px ${Math.floor(Math.random() * 2560)}px #fff`;
      }
      return value;
    }

    function initTestimonialsBG() {
      // Initialize testimonials section background
      const particlesSmall = generateParticles(300);
      const particlesMedium = generateParticles(150);
      const particlesLarge = generateParticles(75);
      
      const particles1 = document.getElementById('particles1-testimonials');
      const particles2 = document.getElementById('particles2-testimonials');
      const particles3 = document.getElementById('particles3-testimonials');

      if (particles1) {
        particles1.style.cssText = `
          width: 1px;
          height: 1px;
          border-radius: 50%;
          box-shadow: ${particlesSmall};
          animation: animStar 50s linear infinite;
        `;
      }

      if (particles2) {
        particles2.style.cssText = `
          width: 1.5px;
          height: 1.5px;
          border-radius: 50%;
          box-shadow: ${particlesMedium};
          animation: animateParticle 100s linear infinite;
        `;
      }

      if (particles3) {
        particles3.style.cssText = `
          width: 2px;
          height: 2px;
          border-radius: 50%;
          box-shadow: ${particlesLarge};
          animation: animateParticle 150s linear infinite;
        `;
      }

      const starsSmall = generateStars(300);
      const starsMedium = generateStars(150);
      const starsLarge = generateStars(75);
      
      const stars1 = document.getElementById('stars1-testimonials');
      const stars2 = document.getElementById('stars2-testimonials');
      const stars3 = document.getElementById('stars3-testimonials');

      if (stars1) {
        stars1.style.cssText = `
          width: 1px;
          height: 1px;
          border-radius: 50%;
          box-shadow: ${starsSmall};
          animation: animStar 50s linear infinite;
        `;
      }

      if (stars2) {
        stars2.style.cssText = `
          width: 1.5px;
          height: 1.5px;
          border-radius: 50%;
          box-shadow: ${starsMedium};
          animation: animateParticle 100s linear infinite;
        `;
      }

      if (stars3) {
        stars3.style.cssText = `
          width: 2px;
          height: 2px;
          border-radius: 50%;
          box-shadow: ${starsLarge};
          animation: animateParticle 150s linear infinite;
        `;
      }
    }

    // Wait for DOM to be ready and then initialize
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initTestimonialsBG);
    } else {
      // DOM is already ready
      setTimeout(initTestimonialsBG, 100);
    }

    // Also try to initialize after Astro page transitions
    document.addEventListener('astro:after-swap', initTestimonialsBG);
  </script>
</section>
