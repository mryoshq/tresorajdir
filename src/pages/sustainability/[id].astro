---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}
// This gets the static paths for all the unique sustainability items

export async function getStaticPaths() {
  const sustainabilityEntries = await getCollection("sustainability", ({ id }) =>
    id.startsWith("fr/")
  );
  return sustainabilityEntries.map((sustainability) => {
    const idWithoutLang = sustainability.id.replace(/^fr\//, ""); // Remove the "fr/" prefix
    return {
      params: { lang: "fr", id: idWithoutLang },
      props: { sustainability },
    };
  });
}

const { sustainability } = Astro.props;

const pageTitle: string = `${sustainability.data.title} | ${SITE.title}`;
const metaDescription = sustainability.data.description;
const ogTitle = `${sustainability.data.title} | Durabilit√© | tresorajdir`;
---

<MainLayout
  title={pageTitle}
  lang="fr"
  customDescription={metaDescription}
  customOgTitle={ogTitle}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "Product",
    "@id": `https://tresorajdir.com/fr/sustainability/${sustainability.data.title.toLowerCase().replace(/\s+/g, "-")}`,
    name: sustainability.data.title,
    description: sustainability.data.description,
    brand: {
      "@type": "Brand",
      name: "tresorajdir",
    },
    inLanguage: "fr",
  }}
>
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto flex max-w-[85rem] flex-col px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div>
      <p
        id="fadeText"
        class="mb-8 max-w-prose font-light text-pretty text-neutral-700 sm:text-xl dark:text-neutral-300"
      >
        {sustainability.data.main.content}
      </p>
    </div>
    <div
      class="flex flex-col items-center justify-between space-y-4 sm:flex-row sm:space-y-0"
    >
      <div id="fadeInUp">
        <h1
          class="block text-4xl font-bold tracking-tighter text-neutral-800 sm:text-5xl md:text-6xl lg:text-7xl dark:text-neutral-200"
        >
          {sustainability.data.title}
        </h1>
        <p class="text-lg text-neutral-600 dark:text-neutral-400">
          {sustainability.data.description}
        </p>
      </div>
      <div>
        <Image
          id="fadeInMoveRight"
          src={sustainability.data.main.imgMain}
          class="w-[600px]"
          alt={sustainability.data.main.imgAlt}
          format={"avif"}
          loading={"eager"}
        />
      </div>
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <nav
      class="mx-auto flex max-w-4xl justify-center gap-y-px sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      {
        sustainability.data.tabs.map((tab, index) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div class="lg:w-3/4">
              <h2
                class="text-3xl font-bold tracking-tight text-balance text-neutral-800 md:leading-tight lg:text-4xl dark:text-neutral-200"
              >
                {sustainability.data.longDescription.title}
              </h2>
              <p
                class="mt-3 text-pretty text-neutral-600 dark:text-neutral-400"
              >
                {sustainability.data.longDescription.subTitle}
              </p>
              <p class="mt-5">
                <PrimaryCTA
                  title={sustainability.data.longDescription.btnTitle}
                  url={sustainability.data.longDescription.btnURL}
                />
              </p>
            </div>

            <div class="space-y-6 lg:space-y-10">
              {
                sustainability.data.descriptionList.map((list) => (
                  <div class="flex">
                    <div>
                      <h3 class="text-base font-bold text-neutral-800 sm:text-lg dark:text-neutral-200">
                        {list.title}
                      </h3>
                      <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                        {list.subTitle}
                      </p>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid w-full grid-cols-1 gap-x-8 gap-y-8 md:grid-cols-2">
            <div class="max-w-md space-y-6">
              {
                sustainability.data.specificationsLeft.map((spec) => (
                  <div>
                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                      {spec.title}
                    </h3>
                    <p class="text-neutral-600 dark:text-neutral-400">
                      {spec.subTitle}
                    </p>
                  </div>
                ))
              }
            </div>
            {
              sustainability.data.specificationsRight ? (
                <div class="max-w-md space-y-6">
                  {sustainability.data.specificationsRight?.map((spec) => (
                    <div>
                      <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                        {spec.title}
                      </h3>
                      <p class="text-neutral-600 dark:text-neutral-400">
                        {spec.subTitle}
                      </p>
                    </div>
                  ))}
                </div>
              ) : sustainability.data.tableData ? (
                <div class="w-full">
                  <div class="overflow-x-auto">
                    <div class="min-w-full">
                      <table class="w-full divide-y divide-neutral-300 dark:divide-neutral-700">
                        <thead>
                          <tr>
                            {sustainability.data.tableData?.[0].feature?.map(
                              (header) => (
                                <th
                                  scope="col"
                                  class="px-4 py-3 text-start text-xs font-medium text-neutral-500 uppercase tracking-wider dark:text-neutral-500"
                                >
                                  {header}
                                </th>
                              )
                            )}
                          </tr>
                        </thead>
                        <tbody class="divide-y divide-neutral-300 dark:divide-neutral-700">
                          {sustainability.data.tableData?.map((row) =>
                            // Wrap each row's content in a separate <tr> element
                            row.description.map((rowData) => (
                              <tr>
                                {/* Iterate through each cell value in the row's description array */}
                                {rowData.map((cellValue) => (
                                  // Render each cell value in its own <td> element
                                  <td class="px-4 py-4 text-sm text-neutral-600 dark:text-neutral-400 break-words">
                                    {cellValue}
                                  </td>
                                ))}
                              </tr>
                            ))
                          )}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              ) : null
            }
          </div>
        </div>
      </div>
    </div>
  </div>

</MainLayout>

<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

  setElementAnimationDefaults("#fadeText", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInUp", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInMoveRight", {
    autoAlpha: 0,
    x: 300,
    willChange: "transform, opacity",
  });

  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

  timeline.to("#fadeText", {
    duration: 1.5,
    autoAlpha: 1,
    y: 0,
    delay: 1,
    ease: "power2.out",
  });

  timeline.to(
    "#fadeInUp",
    { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
    "-=1.2"
  );

  timeline.to(
    "#fadeInMoveRight",
    { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
    "-=1.4"
  );

  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });

  // Show footer after main content animation
  timeline.to("footer", {
    duration: 1,
    opacity: 1,
    visibility: "visible",
    ease: "power2.out",
  }, "+=0.5");
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-red-500", "dark:text-red-700"]
        );
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        ",hover:border-transparent",
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-red-500", "dark:text-red-700"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

    function changeHeadingStyle(
      button: any,
      addClasses: any,
      removeClasses: any
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    if (tabButtons.length > 0) {
      changeHeadingStyle(
        tabButtons[0],
        ["text-red-500", "dark:text-red-700"],
        []
      );
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>

<script>
  // Hide footer initially to prevent logo from showing before animation
  document.addEventListener('DOMContentLoaded', function() {
    // Use GSAP to hide footer initially
    if (typeof gsap !== 'undefined') {
      gsap.set('footer', {
        opacity: 0,
        visibility: 'hidden'
      });
    } else {
      // Fallback if GSAP isn't loaded yet
      const footer = document.querySelector('footer');
      if (footer) {
        footer.style.opacity = '0';
        footer.style.visibility = 'hidden';
      }
    }
  });
</script>
